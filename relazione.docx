Relazione del progetto Tetris in ncurses A.A. 2023/2024
Partecipanti: Pietro Cordaro, Dario Farneti, Giulio Testoni, Dario Venuto


Descrizione generale:

all'avvio del programma viene inizializzato ncurses e aperto il menu` con 
il titolo del gioco (TETRIS) e le tre opzioni 'nuova partita', 'classifica'
e 'uscita'; il menu` puo` essere navigato dall'utente con le frecce direzionali
e le opzioni possono essere selezionate con il tasto invio.

-Selezionando l'opzione 'nuova partita' si avvia una partita di tetris con una
 griglia ampia 10 quadratini (20 caratteri dato che ogni quadratino e` formato da 
 due caratteri []) e alta 20. A destra della griglia viene visualizzato il punteggio attuale.
 Durante la partita, i tetramini spawnano in alto al centro 
 della griglia e si muovono verso il basso da soli a tempo.

 Se non entrano in collisione con altri possono essere mossi dall'utente verso
 destra, sinistra o verso il basso con le frecce direzionali, o ruotati di 90 gradi 
 verso sinistra o destra rispettivamente con i tasti 'w' e 'e'.

 Se un tetramino non riesce a completare un movimento verso il basso a causa di
 una collisione, viene stampato sulla griglia di gioco e ne viene spawnato un altro
 nella posizione di partenza. 

 Se una riga della griglia e` completa, viene cancellata e il punteggio viene aumentato.
 Completare piu` righe contemporaneamente corrisponde a un maggiore aumento del punteggio.

 La partita finisce quando un tetramino non puo` spawnare 
 nella posizione iniziale a causa di una collisione. 
 Una volta terminata la partita, il programma chiedera` all'utente di mettere in input un nome
 che sara` scritto nel file classifica.txt insieme al punteggio raggiunto, dopodiche` tornera` 
 al menu` principale.

-Selezionando l'opzione classifica sara` possibile visualizzare la classifica delle partite 
 precedenti, letta dal file classifica.txt, in ordine decrescente di punteggio.

-Per terminare il programma selezionare l'opzione uscita.


Implementazione:

-main.cpp:
 file principale, inizializza ncurses e poi un ciclo while che termina quando termina il programma;
 dal ciclo while fa partire il gioco o la classifica, a seconda della scelta fatta dall'utente nel menu



-menu.cpp:
 file dedicato alla generazione del menu principale del gioco

 -void stampa_titolo()
  stampa il titolo del menu;

 -WINDOW* crea_finestra_menu(int height, int width, int starty, int startx)
  crea una window per il menu con le caratteristiche date e abilita la lettura dei tasti 

 -void stampa_menu(WINDOW *menuwin, int highlight, const char *choices[], int n_choices)
  stampa il menu, aggiornandolo in base anche all'input dell'utente

 -int gestisci_input_menu(WINDOW *menuwin, int *highlight, int n_choices) 
  cambia la parte del menu evidenziata e seleziona la scelta in base all'input dell'utente

 -int mostra_menu() 
  scrive il corpo del menu; il ciclo while continua a stampare il menu finche` non viene 
  effettuata una scelta
  


-gameloop.cpp:
Questo file regola il funzionamento del vero e proprio schermo di partita, disegnando board (complementata dalle 
indicazioni di punteggio e tempo trascorso) e controllando generazione, distruzione e movimento (automatico o non) dei tetramini.
In particolare:

-bool gameloop::checkline(WINDOW* win, int index_riga)
funzione che controlla quando una riga Ã¨ stata completata, assicurandosi tramite un loop che non siano presenti spazi nella sua lunghezza.

-void gameloop::deleteline(WINDOW* win, int index_riga)
funzione complementare a quella di cui sopra che cancella un intera riga di tetramini dalla schermata di gioco, 
aumenta il punteggio di 100 e infine abbassa di uno tutti i pixel dalla linea cancellata

In seguito la classe sfrutta le funzioni grafiche base di ncurses (box in particolare) per disegnare la board di gioco, 
poi genera e stampa i tetramini tramite le funzioni dichiarate in tetramino.cpp TetraSpawn e printTetramino.

- if (!tetraminoFissato) {
            switch (ch) { ... etc.
funzione che regola, attraverso switch, il movimento volontario del tetramino, consentendo di muoverlo attraverso le frecce.

-  mvprintw(3, 20, "Tempo: %i", time / 100) ... etc.
funzione che gestisce il contatore di tempo del gioco, mostrandolo sullo schermo affianco alla scritta 
tempo e sfruttandolo per muovere automaticament i tetramini in basso ogni secondo

- if (tetraminoFissato) {
            tetramino = Tetramino::tetraSpawn(1, 5);
funzione che genera automaticamente un tetramino ogni volta che uno si fissa e che cancella le righe 
quando esse vengono completate collegando le prime due funzioni tramite una conseguenza if-then;

-if (tetramino.collide(win)) {
                napms(1000);.. etc.
funzione che provoca il game over nel caso in cui un tetramino collida con un altro non appena esso viene generato;



-shapes.cpp:
 questo file inizializza le matrici dei tetramini e ne contiene le forme effettive (array bidimensionali)
 serve a creare una lista di forme di tetramini e sceglierne una a caso ogni volta che bisogna spawnarne uno
 
 -pNode addShape(pNode head, char s[ROWS][COLUMNs]):
  questa funzione serve ad aggiungere un nodo contenente una forma a una lista

 -pNode initSList():
  questa funzione inizializza l'intera lista di forme
 -pNode chooseShape():
  questa funzione sceglie una forma casuale tra quelle inizializzate con initSList(). E` una pseudorandomizzazione, 
  ma viene complementata da una chiamata a srand(time(0)) all'inizio del gameloop perche` non si ripeta ogni volta la 
  stessa partita'



-tetramino.cpp:
 classe tetramino formata dall'array bidimensionale Position[ROWS][COLUMNS] e da delle coordinate di partenza
 startingy e startingx che indicano la posizione corrente su una finestra del punto Position[0][0]

 -int getY()
 -int getX()
  funzioni per usare i parametri di tetramino.cpp fuori dalla classe se necessario

 -bool collide(WINDOW* win)
  confronta la posizione di ogni elemento del tetramino con l'elemento della finestra
  presa in input che si trova alle stesse coordinate, ritorna vero se due elementi nello
  stesso punto sono "pieni", (diverso da '/0' per il tetramino e diverso da ' ' per la window)

 -void mvright(WINDOW* win)
 -void mvleft(WINDOW* win)
 -void mvup(WINDOW* win)
 -bool mvdown(WINDOW* win)
  le quattro funzioni di movimento che operano modificando startingy e startingx;
  prendono in input una finestra perche` devono chiamare collide nella posizione modificata,
  e nel caso in cui si effettui una collisione effettuano il movimento opposto, che riporta la posizione all'originale
  mvdown e` booleana perche`, a differenza delle altre, e` importante verificare se l'esecuzione del movimento verso il 
  basso e` riuscita per sapere se il tetramino va fissato o no
 
 -tetraSpawn(int y, int x)
  crea un tetramino con coordinate iniziali date, usando la funzione chooseShape() di shape.cpp per sceglierne la forma

 -void clearTetramino(WINDOW* win)
  cancella il tetramino da una finestra, scrivendo ' ' alle coordinate in cui e`

 -void printTetramino(WINDOW* win)
  scrive il tetramino sulla finestra win nelle coordinate in cui si trova

 -void ruotaSx(WINDOW* win)
 -void ruotaDx(WINDOW* win)
  le due funzioni di rotazione ruotano il tetramino di 90 gradi nelle rispettive direzioni, scrivendo prima la matrice
  ruotata su una variabile rotated[ROWS][COLUMNS] e poi copia rotated sul campo Position del tetramino.
  come le funzioni di movimento, le funzioni di rotazione chiamano collide(win) a rotazione eseguita eseguendo la
  rotazione opposta in caso di collisione

-void finepartita(int score) 
 la funzione prende in input il punteggio della partite, pulisce lo schermo e richiede al giocatore di segnare il proprio nome. 
 Passa poi l'input "nome giocatore" alla funzione salvanome.

-void salvanome(int score, char nome[]) scrive il punteggio e il nome sul file punteggio.txt.

-void classifica()
 la funzione stampa a schermo i contenuti del file punteggio.txt dopo essere stato ordinato da ordinaClassifica().

-void ordinaClassifica()
 la funzione utilizza bubblesort per ordinare i nomi e irelativi punteggi in ordine decrescente nel file punteggio.txt.












